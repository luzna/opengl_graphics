/*************************************************************************************/
// Program rysuje obraz barwnej sfery oświetlonej przez jedno barwne źródło światła.
// Środek sfery znajduje się w środku układu współrzędnych.
// Do obliczania oświetlenia wykorzystywany jest model Phonga.
/*************************************************************************************/

#include <stdlib.h>
#include <math.h>
#include <stdio.h>
#include <GL/glut.h>
#include <GL/gl.h>

typedef float point[3];

/*************************************************************************************/
// Prototypy używanych funkcji
/*************************************************************************************/

/*************************************************************************************/
// Funkcja obliczająca punkt przecięcia promienia i powierzchni sfery

int Trace(float *p, float *v);

/*************************************************************************************/
// Funkcja obliczająca oświetlenie punktu na powierzchni sfery według modelu Phonga

void Phong(void);

/*************************************************************************************/
// Funkcja obliczająca iloczyn skalarny dwóch wektorów

float dotProduct(point p1, point p2);

/*************************************************************************************/
// Funkcja normalizująca wektor

void Normalization(point p);   


/*************************************************************************************/
// Zmienne globalne
/*************************************************************************************/


/*************************************************************************************/
// Rozmiar obrazu w pikselach (obraz jest kwadratem)

int im_size = 400;

/*************************************************************************************/
// Rozmiar okna obserwatora

float viewport_size = 3.0;

/*************************************************************************************/
// Położenie i parametry źródła światła

float    light_position[] = {3.0, 2.5, 5.0};
float    light_specular[] = {1.0, 1.0, 0.0};
float    light_diffuse[]  = {0.0, 1.0, 1.0};
float    light_ambient[]  = {0.0, 0.0, 0.0};

/*************************************************************************************/
// Promień i parametry rysowanej sfery

float    sphere_radius = 1.0;
float    sphere_specular[] = {0.8, 0.8, 0.8};
float    sphere_diffuse[]  = {0.6, 0.7, 0.8};
float    sphere_ambient[]  = {1.0, 1.0, 1.0};
float    sphere_specularhininess = 30.0;

/*************************************************************************************/
// Parametry światła rozproszonego

float global_a[] = {0.25, 0.15, 0.1};

/*************************************************************************************/
// Parametry "śledzonego" promienia

float starting_point[3]; // punkt, z którego wychodzi promień
float starting_directions[] = {0.0, 0.0, -1.0}; // wektor opisujący kierunek promienia

/*************************************************************************************/
// Zmienne pomocnicze

float inter[3]; // współrzędne (x,y,z) punktu przecięcia promienia i sfery
int inters; // zmienna określająca, czy sfera została przecięta przez
float inters_c[3]; // składowe koloru dla oświetlonego punktu na powierzchni sfery
GLubyte pixel[1][1][3]; // składowe koloru rysowanego piksela


/*************************************************************************************/
// Funkcja oblicza punkt przecięcia promienia i powierzchni sfery
// Argument p jest punktem początkowym promienia a v wektorem opisującym
// kierunek biegu promienia
// Funkcja zwraca 1 jeśli promień przecina sferę. 0 gdy nie przecina.
/*************************************************************************************/

int Trace(float *p, float *v)
{
float a, b, c, d, r;
   
    a = v[0]*v[0] + v[1]*v[1] + v[2]*v[2];
    b = 2*(p[0]*v[0] + p[1]*v[1] + p[2]*v[2]);
    c = p[0]*p[0] + p[1]*p[1] + p[2]*p[2] - 1.0;

    d = b*b-4*a*c;
   
    if (d>=0)                        // jest co najmniej jeden punkt przecięcia
    {
        r = (-b - sqrt(d))/(2*a);    // parametr dla bliższego punktu przecięcia

        inter[0] = p[0] + r*v[0];    // współrzędne punktu przecięcia
        inter[1] = p[1] + r*v[1];
        inter[2] = p[2] + r*v[2];

        return 1;    // jest punkt przecięcia
    }
    else             // promień nie przecina sfery
        return 0;
}

/*************************************************************************************/
// Funkcja oblicza oświetlenie punktu na powierzchni sfery używając modelu Phonga.
/*************************************************************************************/

void Phong(void)
{
float normal_vector[3];                // wektor normalny do powierzchni
float light_vec[3];                    // wektor wskazujący źródeł
float reflection_vector[3];            // wektor kierunku odbicia światła
float viewer_v[3] = {0.0, 0.0, 1.0};   // wektor kierunku obserwacji
float n_dot_l, v_dot_r;                // zmienne pomocnicze

    normal_vector[0] = inter[0];       // wektor normalny do powierzchni sfery       
    normal_vector[1] = inter[1];           
    normal_vector[2] = inter[2];

    light_vec[0] = light_position[0] - inter[0]; // wektor wskazujący kierunek źródła
    light_vec[1] = light_position[1] - inter[1];
    light_vec[2] = light_position[2] - inter[2];

    Normalization(light_vec);    // normalizacja wektora kierunku świecenia źródła           

    n_dot_l = dotProduct(light_vec, normal_vector);
                               
    reflection_vector[0] = 2*(n_dot_l)*normal_vector[0] - light_vec[0];
    reflection_vector[1] = 2*(n_dot_l)*normal_vector[1] - light_vec[1];
    reflection_vector[2] = 2*(n_dot_l)*normal_vector[2] - light_vec[2];

    // obliczenie wektora opisującego kierunek światła odbitego od punktu na powierzchni sfery

    Normalization(reflection_vector); // normalizacja wektora kierunku światła odbitego

    v_dot_r = dotProduct(reflection_vector, viewer_v);

    if(v_dot_r < 0)                  // obserwator nie widzi oświetlanego punktu

      v_dot_r = 0;

    // sprawdzenie czy punkt na powierzchni sfery jest oświetlany przez źródło

    if (n_dot_l > 0)    // punkt jest oświetlany,
    {                   // oświetlenie wyliczane jest ze wzorów dla modelu Phonga

     inters_c[0] = (sphere_diffuse[0]*light_diffuse[0]*n_dot_l + sphere_specular[0]*light_specular[0]*pow(double(v_dot_r), 20.0)) + sphere_ambient[0]*light_ambient[0] + sphere_ambient[0]*global_a[0];

     inters_c[1] = (sphere_diffuse[1]*light_diffuse[1]*n_dot_l + sphere_specular[1]*light_specular[1]*pow(double(v_dot_r), 20.0)) + sphere_ambient[1]*light_ambient[1] + sphere_ambient[1]*global_a[1];

     inters_c[2] = (sphere_diffuse[2]*light_diffuse[2]*n_dot_l + sphere_specular[2]*light_specular[2]*pow(double(v_dot_r), 20.0)) + sphere_ambient[2]*light_ambient[2] + sphere_ambient[2]*global_a[2];
    }
    else                // punkt nie jest oświetlany   
    {                   // uwzględniane jest tylko światło rozproszone

     inters_c[0] = sphere_ambient[0]*global_a[0];
     inters_c[1] = sphere_ambient[1]*global_a[1];
     inters_c[2] = sphere_ambient[2]*global_a[2];
    }
}

/*************************************************************************************/
// Funkcja przeprowadza normalizację wektora.
/*************************************************************************************/

void Normalization(point p)       
{
float d =0.0;
int i;

    for(i=0; i<3; i++)
        d+=p[i]*p[i];
  
    d=sqrt(d);
   
    if(d>0.0)
        for(i=0; i<3; i++)
            p[i]/=d;
}

/*************************************************************************************/
// Funkcja oblicza iloczyn skalarny wektorów.
/*************************************************************************************/
float dotProduct(point p1, point p2)
{
    return (p1[0]*p2[0]+p1[1]*p2[1]+p1[2]*p2[2]);
}

/*************************************************************************************/
// Funkcja rysująca obraz oświetlonej sceny.
/*************************************************************************************/
void Display(void)
{
int  x, y;           // pozycja rysowanego piksela "całkowitoliczbowa"
float x_fl, y_fl;    // pozycja rysowanego piksela "zmiennoprzecinkowa"
int im_size_2;       // połowa rozmiaru obrazu w pikselach


    im_size_2 = im_size/2;    // obliczenie połowy rozmiaru obrazu w pikselach

    glClear(GL_COLOR_BUFFER_BIT);
       
    glFlush();
   
    // rysowanie pikseli od lewego górnego narożnika do prawego dolnego narożnika

    for (y = im_size_2; y > -im_size_2; y--)   
    {
        for (x = -im_size_2; x < im_size_2; x++)   
        {
       
        x_fl = (float)x/(im_size/viewport_size);       
        y_fl = (float)y/(im_size/viewport_size);       

        // przeliczenie pozycji(x,y) w pikselach na pozycję
        // "zmiennoprzecinkową" w oknie obserwatora
       
        starting_point[0] =  x_fl;           
        starting_point[1] =  y_fl;
        starting_point[2] =  viewport_size;

        // wyznaczenie początku śledzonego promienia dla rysowanego piksela
   
        inters = Trace(starting_point, starting_directions);

        // obliczenie punktu przecięcia ze sferą

            if (inters == 1)    // promień przecina sferę
            {
                 Phong(); // obliczenie oświetlenia przy pomocy modelu Phonga

                // konwersja wartości wyliczonego oświetlenia na liczby od 0 do 255

                if (inters_c[0] > 1)            // składowa czerwona R               
                    pixel[0][0][0] = 255;
                else
                    pixel[0][0][0] = inters_c[0]*255;
               
                if (inters_c[1] > 1)            // składowa zielona G   
                    pixel[0][0][1] = 255;
                else
                    pixel[0][0][1] = inters_c[1]*255;
               
                if (inters_c[2] > 1)            // składowa niebieska B
                    pixel[0][0][2] = 255;
                else
                    pixel[0][0][2] = inters_c[2]*255;
            }
            else    // promień nie przeciana sfery piksel jest rysowany w kolorze tła
            {
                pixel[0][0][0] = 0;             //  składowa R tła
                pixel[0][0][1] = 0;             //  składowa G tła
                pixel[0][0][2] = 51;            //  składowa B tła
           }

        glRasterPos3f(x_fl, y_fl, 0);

        // inkrementacja pozycji rastrowej dla rysowania piksela

        glDrawPixels(1, 1, GL_RGB, GL_UNSIGNED_BYTE, pixel);

        // Narysowanie kolejnego piksela na ekranie
        }
    }
    glFlush();
}

/*************************************************************************************/
// Funkcja inicjalizująca definiująca sposób rzutowania.
/*************************************************************************************/
void Myinit(void)
{
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-viewport_size/2, viewport_size/2, -viewport_size/2, viewport_size/2, -viewport_size/2, viewport_size/2);
    glMatrixMode(GL_MODELVIEW);
}

/*************************************************************************************/
// Funkcja główna.
/*************************************************************************************/
void main(void)
{
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA);   
    glutInitWindowSize(im_size, im_size);
    glutCreateWindow("Ray Casting - oświetlona sfera");
    Myinit();
    glutDisplayFunc(Display);
    glutMainLoop();
}
/*************************************************************************************/ 